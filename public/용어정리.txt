npm, npx, yarn 란?
 - Node 프로젝트에서 설치되는 패키지들을 관리해 주는 툴

npm(node package manager)
 - 자바스크립트 환경에서 프로젝트를 시작할 때 node와 함께 설치하라는 Getting Started가 많고, 사용빈도가 높다.
 장점
 	☞ 배포가 쉽고 종속성을 쉽게 해결
 단점
 	☞ 패키지가 중복으로 설치될 수 있다는 단점
 	☞ 파일이 많은 경우 문제가 된다
 	☞ node_modules를 관리하면서의 불편한 점을 개선하기 위해 Yarn이 탄생

npx(execute npm package binaries)
 ◎ 빠르다 : npm3 보다 패키지 설치 속도가 빠르다. (처음 다운로드 시에는 npm과 동일함)
 ◎ 안전성: json 포맷을 사용하지 않는다.
 ◎ 신뢰성 : 오프라인 모드가 가능하다.
 - 패키지 실행 도구 라는 것이 npm과의 큰 차이점이자 장점
 - npx는 해당 패키지를 실행만 되게 해 주기 때문에 가볍게 쓸 수 있다.
 ex)
 	다른 사람의 git repository 에서 다운받아 실행만 시켜보고 싶다고 가정
 	☞ package.json의 scripts 중 하나를 실행하고 싶을 때,
 	    npx와 스크립트를 적으면 패키지 설치를 하지 않고 실행을 할 수 있다
yarn
 - npm, npx와는 결이 다른 패키지 관리자이다.
 - 속도나 안정성에서는 npm과 비슷
 - 버전을 어디에서나 같게 만들어 버그를 줄임으로써 보안을 높였다

React
 - 장점
    ☞ 컴포넌트화
    ☞ 각종 신기술 모듈을 활용한 확성성? 용이
    ☞ JSX 사용가능
        > 태그 정의 + 커스텀 태그 활용가능
            >> 태그를 return 해주는 JSX 문법 사용가능
        > className
 
node.js
 - 설치 이유
 - npm, npx 를 활용한 jQuery+react 등을 간편하게 설치 가능하다
   (creat-react-all 라이브러리 활용가능)
 
 
javascript
 - var
   ☞ 장) 초기화된 데이터 타입으로, 변수type 이 변한다
   ☞ 단) scope 안의 변수가 정의 되어 있어도 다시선언가능
           + 가독성이 떨어짐
 
 - let
    특) scope 안의 변수가 정의 되어 있으면 재선언 불가
        + 값 변경 O
 
 - const
    특) scope 안의 변수가 정의 되어 있으면 재선언 불가
        + 값 변경 X

========================================================================================
=VS-Code 단축키=
*파일찾기
 - Ctrl + p
 
*전체 파일 참조 찾기
 - Ctrl + Shift + F
 
*명령어 검색
 - F1
 - Ctrl + Shift + P
 
*확장 프로그램 탐색기
 - Ctrl + Shift + X

*탐색기
 - Ctrl + Shift + E

*세로편집
 - Ctrl + Alt + Shift + 방향키


*디렉토리 구조
 - node_modules
   > vlfdygks fkdlqmfjfl qhrhks
 - public
   > static 파일 보관
   > 빌드?, 발행?, 컴파일? 대상에서 제외
 - src
   > 실제 소스코드 보관
      (html, js, css)
 - package.json
   > 라이브러리 모듈 정의
   > 실제로 직접수정은 잘 하지 않고,
      모듈 업데이트 를 통해 바뀌도록 한다



*NPM (Node Package Manager) 설치 확인
npm -v
 
*create-react-app 모듈 설치
npx create-react-app {project name}
npx create-react-app react_tester


VSCODE - GIT연동(가져오기)
git clone https://github.com/HongChoonWon/Test_React_20220711.git


레파지토리 브랜치 를 node에서 못찾을때 연결
git  remote  set-branches  --add  origin main
git  fetch  origin

계정설정[git]
*삭제
git config --unset user.name
git config --unset user.email
*삭제(글로벌)
git config --unset --global user.name
git config --unset --global user.email
*설정
git config --global user.name HongChoonWon
git config --global user.email ghdcnsdnjs@naver.com



연결된 원격 repository 확인
git remote -v
 
브랜치 확인
[현재] git branch
[모든] git branch -a
[????] git branch -r
 
 
브랜치 전환
git checkout -t origin/main
git checkout -t origin/master


커밋(미완성)
*원격 리모트 게정 추가?
git remote add origin https://github.com/HongChoonWon/Test_React_20220711.git

*commit
git add .
git commit -m "markdown"

*push
git push 원격저장소명 브랜치명
git push origin master
git push master



npm install redux


==sniffets
(참고 :: https://www.hanl.tech/blog/vs-code-react-time-awesome-snippets/)

rfc
 - react 기본생성

rfcredux
 - redux 생성

rcc
 - React stateless component skeleton






